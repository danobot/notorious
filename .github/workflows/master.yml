name: Build

on:
  push:
#     branches:
#       - master
#       - develop

# We need two jobs: First a build-job, running on a matrix
# to build all necessary releases, which also uploads all
# resulting assets to the workflow. And then, we download
# them onto a separate VM running the release-job to verify
# the checksums and create a draft release.
jobs:
  release_management:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        if: github.ref == 'refs/heads/master'
      - name: Setting up Node
        uses: actions/setup-node@v1
        if: github.ref == 'refs/heads/master'
        with:
          node-version: '10.15.1'
      - name: Preparing release
        if: github.ref == 'refs/heads/master'

        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          pushd ./app
            npx standard-version -a --no-verify --prerelease alpha --skip.tag --skip.changelog
            echo ::set-env name=PACKAGE_VERSION::$(node -p -e "require('./package.json').version")
          popd
          npx standard-version -a --no-verify --prerelease alpha --skip.tag
        env:
          CI: true
      - name: Push to master
        if: github.ref == 'refs/heads/master'

        uses: ad-m/github-push-action@v0.5.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Merge back to develop
      #   uses: ad-m/github-push-action@v0.5.0
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: develop
  build:
    needs: [release_management]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, ubuntu-18.04]

    # Define the operating system
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup NodeJS 12.x
        uses: actions/setup-node@v1
        if: matrix.os != 'ubuntu-18.04'

        with:
          node-version: '10.15.0'

      - name: Get version numbers from package.json
        id: pkg
        run: |
          appver=$(node -p -e "require('./app/package.json').version")
          pkgver=$(node -p -e "require('./package.json').version")
          echo ::set-output name=version::$appver
          echo ::set-output name=package_version::$pkgver
        shell: bash
      # On Windows server, we have to create the handlebars-directory
      # manually, because the node-process always crashes when it
      # attempts literally the same thing.
      - name: Manually create the handlebars-directory (Windows only)
        if: matrix.os == 'windows-latest'
        run: New-Item -Path "./source/common/assets" -Name "handlebars" -ItemType "directory" # Hello, PowerShell ._.

      - name: Set up build environment and compile the assets
        if: matrix.os != 'ubuntu-18.04'
        run: |
          yarn
      # WINDOWS ==============================================================
      - name: "[Windows Build] Build & Publish Windows Installer"
        if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/master'
        run: yarn package-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "[Windows Build] Build Windows Installer"
        if: matrix.os == 'windows-latest' && github.ref != 'refs/heads/master'
        run: yarn package-win-build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # # MACOS ================================================================
      # # - name: Build macOS DMG file
      # #   if: matrix.os == 'macos-latest' # Only if the job runs on macOS
      # #   run: GH_TOKEN=${{ secrets.GITHUB_TOKEN }} APPLE_ID=${{ secrets.APPLE_ID }} APPLE_ID_PASS=${{ secrets.APPLE_ID_PASS }} CSC_LINK=${{ secrets.MACOS_CERT }}  CSC_KEY_PASSWORD=${{ secrets.MACOS_CERT_PASS }} npm run release:mac
      # # - name: Cache macOS release
      # #   if: matrix.os == 'macos-latest' # Only if the job runs on macOS
      # #   uses: actions/upload-artifact@v1
      # #   with:
      # #     name: Notorious-${{ steps.pkg.outputs.version }}.dmg
      # #     path: ./release/Notorious-${{ steps.pkg.outputs.version }}.dmg

      # LINUX ================================================================
      - name: "[Linux Build] Build & Publish Linux installers"
        if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/master'
        run: GH_TOKEN=${{ secrets.GITHUB_TOKEN }} yarn package-linux
      - name: "[Linux Build] Build Linux installers"
        if: matrix.os == 'ubuntu-latest' && github.ref != 'refs/heads/master'
        run: GH_TOKEN=${{ secrets.GITHUB_TOKEN }} yarn package-linux-build


      # LINUX DOCKER ================================================================
      - name: "[Docker Build] Login to DockerHub Registry"
        if: matrix.os == 'ubuntu-18.04'
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: "[Docker Build] Build the tagged Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref == 'refs/heads/master'
        run: docker build . --file Dockerfile.prod --tag danobot/notorious:${{ steps.pkg.outputs.version }}
      - name: "[Docker Build] Push the tagged Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref == 'refs/heads/master'
        run: docker push danobot/notorious:${{ steps.pkg.outputs.version }}
      - name: "[Docker Build] Build the latest Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref != 'refs/heads/master'
        run: docker build . --file Dockerfile.prod --tag danobot/notorious:latest
      - name: "[Docker Build] Push the latest Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref == 'refs/heads/develop'
        run: docker push danobot/notorious:latest
  # As soon as the build matrix has completed correctly, this job will
  # commence, creating a new draft release, downloading all assets from
  # the previous job, verifying the checksum integrity, and uploading that
  # whole mess to the draft release.
  # prepare_release:
  #   needs: [build] # Make sure (and wait until) the build has succeeded
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     # Clone the repository to get the ./scripts/get-pkg-version.js and the ./package.json
  #     - uses: actions/checkout@v2
  #     # Setup node to run the retrieval script
  #     - name: Setup NodeJS 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: '10.15.0'
  #     - name: Retrieve the current package version
  #       id: pkg
  #       run: |
  #         pkgver=$(node -p -e "require('./app/package.json').version")

  #         echo ::set-output name=version::$pkgver
  #     # Now, download all resulting assets from the previous steps.
  #     - name: Download the Windows asset
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: Notorious-${{ steps.pkg.outputs.version }}.exe
  #         path: .
  #     # - name: Download the macOS asset
  #     #   uses: actions/download-artifact@v1
  #     #   with:
  #     #     name: Notorious-${{ steps.pkg.outputs.version }}.dmg
  #     #     path: .
  #     - name: Download the Debian asset
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: Notorious-${{ steps.pkg.outputs.version }}-amd64.deb
  #         path: .
  #     - name: Download the Fedora asset
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: Notorious-${{ steps.pkg.outputs.version }}-x86_64.rpm
  #         path: .
  #     - name: Download the AppImage (x32) asset
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: Notorious-${{ steps.pkg.outputs.version }}-i386.AppImage
  #         path: .
  #     # - name: Download the AppImage (x64) asset
  #     #   uses: actions/download-artifact@v1
  #     #   with:
  #     #     name: Notorious-${{ steps.pkg.outputs.version }}-x86_64.AppImage
  #     #     path: .
  #     # Now we are set, we have all five release assets on the VM. It's time to create the
  #     # SHA-checksums file and then upload everything!
  #     - name: Generate SHA256 checksums
  #       run: |
  #         ls -la
  #         sha256sum "Notorious Setup ${{ steps.pkg.outputs.version }}.exe" > "SHA256SUMS.txt"
  #         # sha256sum "Notorious-${{ steps.pkg.outputs.version }}.dmg" >> "SHA256SUMS.txt"
  #         sha256sum "notorious_${{ steps.pkg.outputs.version }}_amd64.deb" >> "SHA256SUMS.txt"
  #         sha256sum "notorious-${{ steps.pkg.outputs.version }}.x86_64.rpm" >> "SHA256SUMS.txt"
  #         sha256sum "Notorious-${{ steps.pkg.outputs.version }}.AppImage" >> "SHA256SUMS.txt"

  #       # sha256sum "Notorious-${{ steps.pkg.outputs.version }}-x86_64.AppImage" >> "SHA256SUMS.txt"
  #     - name: Verify checksums
  #       run: |
  #         ls -la
  #         sha256sum -c SHA256SUMS.txt
  #     # Create a new release draft
  #     - name: Create a new release draft
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: v${{ steps.pkg.outputs.version }} # tag_name is required, but can be overridden during edit
  #         release_name: v${{ steps.pkg.outputs.version }} # release_name is required
  #         body: If you can read this, we have forgotten to fill in the changelog. Sorry!
  #         draft: true # Always create as draft, so that we can populate the remaining values easily


  #     # And finally, upload that shit
  #     - name: Upload Windows asset
  #       uses: actions/upload-release-asset@v1.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./Notorious Setup ${{ steps.pkg.outputs.version }}.exe
  #         asset_name: Notorious-${{ steps.pkg.outputs.version }}.exe
  #         asset_content_type: application/x-msdownload


  #     # - name: Upload macOS asset
  #     #   uses: actions/upload-release-asset@v1.0.1
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   with:
  #     #     upload_url: ${{ steps.create_release.outputs.upload_url }}
  #     #     asset_path: ./Notorious-${{ steps.pkg.outputs.version }}.dmg
  #     #     asset_name: Notorious-${{ steps.pkg.outputs.version }}.dmg
  #     #     asset_content_type: application/octet-stream


  #     - name: Upload Debian asset
  #       uses: actions/upload-release-asset@v1.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./notorious_${{ steps.pkg.outputs.version }}_amd64.deb
  #         asset_name: Notorious-${{ steps.pkg.outputs.version }}-amd64.deb
  #         asset_content_type: application/octet-stream


  #     - name: Upload Fedora asset
  #       uses: actions/upload-release-asset@v1.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./notorious-${{ steps.pkg.outputs.version }}.x86_64.rpm
  #         asset_name: Notorious-${{ steps.pkg.outputs.version }}-x86_64.rpm
  #         asset_content_type: application/octet-stream


  #     - name: Upload AppImage (x32) asset
  #       uses: actions/upload-release-asset@v1.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./Notorious-${{ steps.pkg.outputs.version }}.AppImage
  #         asset_name: Notorious-${{ steps.pkg.outputs.version }}-i386.AppImage
  #         asset_content_type: application/octet-stream


  #     # - name: Upload AppImage (x64) asset
  #     #   uses: actions/upload-release-asset@v1.0.1
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   with:
  #     #     upload_url: ${{ steps.create_release.outputs.upload_url }}
  #     #     asset_path: ./Notorious-${{ steps.pkg.outputs.version }}-x86_64.AppImage
  #     #     asset_name: Notorious-${{ steps.pkg.outputs.version }}-x86_64.AppImage
  #     #     asset_content_type: application/octet-stream

  #     - name: Upload the checksums
  #       uses: actions/upload-release-asset@v1.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./SHA256SUMS.txt
  #         asset_name: SHA256SUMS.txt
  #         asset_content_type: text/plain

